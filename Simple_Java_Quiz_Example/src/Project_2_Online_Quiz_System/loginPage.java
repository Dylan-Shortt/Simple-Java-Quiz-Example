/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//**************************************************************************************//
package Project_2_Online_Quiz_System;
//*************************************************//
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
//*************************************************//

//*************************************************//
/**
 *
 * @author dylan
 */
//*************************************************//
public class loginPage extends javax.swing.JFrame {
    //*************************************************//
    /**
     * Creates new form loginPage
     */
    //*************************************************//
    
    //*************************************************//
    //admin values
    static final String adminUsername = "admin@0100";
    static final String adminPassword = "admin@0100";
    //*************************************************//
    
    public loginPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaErrorMessage = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login Page");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Welcome to Java's Online Quiz Page");

        lblUsername.setText("Enter Username: ");

        lblPassword.setText("Enter Password:");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        txaErrorMessage.setEditable(false);
        txaErrorMessage.setColumns(20);
        txaErrorMessage.setRows(5);
        jScrollPane1.setViewportView(txaErrorMessage);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword)
                                    .addComponent(txtUsername))
                                .addGap(12, 12, 12)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        
        //*************************************************//
        //get values from fields
        String username = txtUsername.getText();
        String password = txtPassword.getText();
        //*************************************************//
        
        //*************************************************//
        // Error message collector
        StringBuilder errorMessage = new StringBuilder();
        //*************************************************//
        
        //*************************************************//
        // Validate username
        if (!validateUsername(username)) 
        {
            errorMessage.append("Invalid Username: ").append(txaErrorMessage.getText()).append("\n");
        }
        //*************************************************//
        
        //*************************************************//
        // Validate password
        if (!validatePassword(password)) 
        {
            errorMessage.append("Invalid Password: ").append(txaErrorMessage.getText()).append("\n");
        }
        //*************************************************//
        
        //*************************************************//
        // Check if there are any errors
        if (errorMessage.length() > 0) 
        {
            txaErrorMessage.setText(errorMessage.toString());            
        } else 
        {            
            // Successful login if username and password are valid
            if (checkAccount(username, password)) 
            {
                //*************************************************//
                JOptionPane.showMessageDialog(null, "Login successful!");
                txaErrorMessage.setText("");  // Clear error messages
                //*************************************************//
                
                //*************************************************//
                //check if_ the user is an admin
                if((username.equals(adminUsername)) && (password.equals(adminPassword)))
                {
                    //*************************************************//
                    //load admin menu
                    JOptionPane.showMessageDialog(null, "Welcome admin, you have full access to the website", "Admin login", JOptionPane.INFORMATION_MESSAGE);
                    //*************************************************//
                    
                    //*************************************************//
                    //load admin window
                    adminWindow admin_window = new adminWindow();
                    admin_window.setVisible(true);
                    dispose();
                    //*************************************************//
                }
                else 
                {
                    //*************************************************//
                    //load normal user menu
                    JOptionPane.showMessageDialog(null, "Welcome, you have logined into our online quiz website", "Welcome", JOptionPane.INFORMATION_MESSAGE);
                    //*************************************************//
                    
                    //*************************************************//
                    //open quiz's menu
                    quizSelectionWindow quiz = new quizSelectionWindow();
                    quiz.setVisible(true);
                    dispose();
                    //*************************************************//
                }
                //*************************************************//
                //*************************************************//
                
                //*************************************************//
                //dispose
                dispose();
                //*************************************************//
            } else 
            {
                //*************************************************//
                txaErrorMessage.setText("Invalid username or password.");
                //*************************************************//
            }
        }
        //*************************************************//
        
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
               // TODO add your handling code here:
        
        //*************************************************//
        //save text values
        String username = txtUsername.getText();
        String password = txtPassword.getText();
        //*************************************************//

        //*************************************************//
        //check that the username and password are correct
        if (validateUsername(username) && validatePassword(password)) 
        {
            //*************************************************//
            //if_ the check account values are correct but already exist
            if (checkAccount(username, password)) 
            {
                //*************************************************//
                //alert user to created account
                txaErrorMessage.setText("Account already exists!");
                //*************************************************//
            } 
            else 
            {
                //*************************************************//
                //save new acocunt
                if (saveAccount(username, password)) 
                {
                    //*************************************************//
                    txaErrorMessage.setText("Account registered successfully!");
                    //*************************************************//
                                        
                }
                //*************************************************//
            }
            //*************************************************//
        }
        //*************************************************//
    }//GEN-LAST:event_btnRegisterActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextArea txaErrorMessage;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    //*************************************************//
    //check username contains values
    private boolean validateUsername(String username) 
    {
        //*************************************************//
        if (username.isBlank()) 
        {
            txaErrorMessage.setText("Username must contain values!");
            return false;
        }
        //*************************************************//
        
        //*************************************************//
        if (!username.matches("(?=.*\\d)(?=.*[@#$%^&*()_+!]).{5,}")) 
        {
            txaErrorMessage.setText("Username must contain at least one number, one special character, and be at least 5 characters long.");
            return false;
        }
        //*************************************************//
        
        //*************************************************//
        return true;
        //*************************************************//
    }
    //*************************************************//

    //*************************************************//
    private boolean validatePassword(String password) 
    {
        //*************************************************//
        if (password.isBlank()) 
        {
            txaErrorMessage.setText("Password must contain values!");
            return false;
        }
        //*************************************************//
        
        //*************************************************//
        if (!password.matches("(?=.*\\d)(?=.*[@#$%^&*()_+!]).{5,}")) 
        {
            txaErrorMessage.setText("Password must contain at least one number, one special character, and be at least 5 characters long.");
            return false;
        }
        //*************************************************//
        
        //*************************************************//
        return true;
        //*************************************************//
    }
    //*************************************************//

    //*************************************************//
    private boolean checkAccount(String username, String password) 
    {
        //*************************************************//
        try {
            //*************************************************//
            BufferedReader reader = new BufferedReader(new FileReader("Registered accounts.txt"));
            String line;
            //*************************************************//
            
            //*************************************************//
            while ((line = reader.readLine()) != null) 
            {
                //*************************************************//
                // assuming username and password are separated by '###'
                String[] account = line.split("###"); 
                //*************************************************//
                
                //*************************************************//
                if (account.length == 2 && account[0].equals(username) && account[1].equals(password)) 
                {
                    //*************************************************//
                    // Account found
                    reader.close();
                    return true; 
                    //*************************************************//
                }
                //*************************************************//
            }
            //*************************************************//
            
            //*************************************************//
            //close the reader
            reader.close();
            //*************************************************//
            
        } 
        //*************************************************//
        catch (IOException e) 
        {
            txaErrorMessage.setText("Error reading accounts file.");
        }
        //*************************************************//
        
        //*************************************************//
        //if_ the account is not found
        return false;
        //*************************************************//
    }
    //*************************************************//
    
//*************************************************//
    // saveAccount method
    private boolean saveAccount(String username, String password) 
    {
        //*************************************************//
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("Registered accounts.txt", true))) 
        {
            //*************************************************//
            // Format username and password
            writer.write(username + "###" + password);
            writer.newLine();
            return true;
            //*************************************************//
        } 
        //*************************************************//
        catch (IOException e) 
        {
            txaErrorMessage.setText("Error saving account to file.");
            return false;
        }
        //*************************************************//
    }
    //*************************************************//
}
//***********************************END OF FILE****************************************//